---
- name: initial check setup
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  vars_files:
    - vars/aws_vars.yml
    - vars/aws_vault.yml
    - vars/builder_vars.yml
    - vars/builder_vault.yml
    - vars/idm_vars.yml
    - vars/idm_vault.yml
    - vars/sat_vars.yml
    - vars/sat_vault.yml
  vars:
    ec2_wait: true
  tasks:

    - name: collection final check
      block:
        - name: run AWS check setup if using AWS
          ansible.builtin.include_role:
            name: roles/aws_check_setup

      rescue:
        - name: Error with setup
          fail:
            msg: The provisioner has failed during initial check_setup, please scroll up to see exact error.  Open an issue on https://github.com/ansible/workshops/issues

#    - name: add dns entries
#      include_role:
#        name: roles/aws_dns
#      when:
#        - dns_type is defined
#        - dns_type == "aws"

    - name: Provision network stuff
      ansible.builtin.include_role:
        name: roles/manage_ec2_infra

    - name: "Build the imagebuilder image"
      ansible.builtin.include_tasks: tasks/buildimage.yml
      tags:
        - buildimage
      when: imagebuilder_ami is not defined

    - name: "Display the imagebuilder image"
      ansible.builtin.debug:
        msg: "imagebuilder_ami is {{ imagebuilder_ami }}"

    - name: Provision idm machine
      ansible.builtin.include_tasks: tasks/create_idm_ec2.yml

    - name: Provision satellite machine
      ansible.builtin.include_tasks: tasks/create_sat_ec2.yml

    - name: Build inventory for subsequent plays
      ansible.builtin.include_role:
        name: roles/build_bootstrap_inventory

    - name: Save facts for later
      ansible.builtin.set_fact:
        idm_instance: '{{ idm_instance_info.instances[0] }}'
        sat_instance: '{{ sat_instance_info.instances[0] }}'

    - name: Wait for EC2 servers to be available
      ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 22
      loop:
        - "{{ idm_instance['public_ip_address'] }}"
        - "{{ sat_instance['public_ip_address'] }}"

- name: Post-provisioning tasks
  hosts: idm_primary:sat_primary
  become: true
  gather_facts: true
  vars:
    idm_info: "{{ hostvars['localhost']['idm_instance'] }}"
    sat_info: "{{ hostvars['localhost']['sat_instance'] }}"
  tasks:
    - name: Set hostnames
      ansible.builtin.hostname:
        name: '{{ short_hostname }}.{{ ipa_server_domain }}'

    - name: Set /etc/hosts
      ansible.builtin.copy:
        content: |-
          127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
          ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

          {{ idm_info.private_ip_address }}       idm.{{ ipa_server_domain }} idm
          {{ sat_info.private_ip_address }}       sat.{{ ipa_server_domain }} sat satellite

        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'

    - name: Expand EBS disks
      ansible.builtin.include_role:
        name: roles/expand_imagebuilder_rootvg
#
#- name: IdM-specific Post-provisioning tasks
#  hosts: idm
#  become: true
#  gather_facts: true
#  tasks:
#    # Disk layout
#
#- name: Satellite-specific Post-provisioning tasks
#  hosts: satellite
#  become: true
#  gather_facts: true
#  tasks:
#    # Disk layout
