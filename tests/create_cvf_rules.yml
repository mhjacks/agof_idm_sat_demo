---
# Rule creation is complex as it depends on many factors
# Under various conditions, many parameters are either ignored or not applicable or will cause errors.
# To simplify our variable file definitions and make them more natural we do the work
# here to pass the information intelligently to the module.
#
# A better module design would have a much simplified katello_content_view_filter and also create
# a katello_content_view_filter_rule module. 
# The challenge being rpm (rpm package or package group) filters can have multiple rules 
# - each package or package group included or exclude constitutes a "rule" for the filter
# The same goes for erratum (erratum_by_id) filters 
# - each erratum id being considered a "rule" for the filter.
# The erratum_by_date style filters only have one rule associated to them
#
# So the model here is to use task local variables and assign values based on what was passed in the 
# rule configuration rather than having our user create lots of empty values for rules in their var file
#
# Set the facts for the variable parts of the rule definition
#
- set_fact:
    start_date: ""
    end_date: ""
    date_type: ""
    errata_id: ""
    max_version: ""
    min_version: ""
    version: ""
    types: ""
    architecture: ""

# Set rule variables for erratum type filters

- set_fact: 
    start_date: "{{ cvfr.start_date }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.start_date is defined

- set_fact:
    end_date: "{{ cvfr.end_date }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.end_date is defined

- set_fact:
    date_type: "{{ cvfr.date_type }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.date_type is defined

- set_fact:
    errata_id: "{{ cvfr.errata_id }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.errata_id is defined

- set_fact:
    types: "{{ cvfr.types }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.types is defined


# Set rule variables for rpm and package_group type filters
# We are not implementing docker filters in this implementation 
# We use Quay for storing and managing all container images NOT Satellite/Foreman
#

- set_fact:
    max_version: "{{ cvfr.max_version }}"
  when: 
    - cvf.type == 'rpm'
    - cvfr.max_version is defined

- set_fact:
    min_version: "{{ cvfr.min_version }}"
  when: 
    - cvf.type == 'rpm'
    - cvfr.min_version is defined

- set_fact:
    version: "{{ cvfr.version }}"
  when: 
    - cvf.type == 'rpm'
    - cvfr.version is defined

- set_fact:
    types: "{{ cvfr.types }}"
  when: 
    - cvf.type == 'erratum'
    - cvfr.types is defined

# append the rule based on the filter type

- name: "Create the content view erratum filter rule {{ cvfr.name }}"
  katello_content_view_filter:
    username: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    server_url: "{{ satellite_url }}"
    organization: "{{ satellite_initial_organization }}"
    validate_certs: "{{ satellite_validate_certs }}"
    content_view: "{{ cv.name }}"
    name: "{{ cvf.name }}"
    filter_type: "{{ cvf.type }}"
    rule_name: "{{ cvfr.name }}"
#    errata_id: "{{ errata_id }}"
    start_date: "{{ start_date }}"
    end_date: "{{ end_date }}"
    date_type: "{{ date_type }}"
    types: "{{ types }}"
    rule_state: present
  when: "cvf.type == 'erratum'"


- name: "Create the content view rpm filter rule {{ cvfr.name }}"
  katello_content_view_filter:
    username: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    server_url: "{{ satellite_url }}"
    organization: "{{ satellite_initial_organization }}"
    validate_certs: "{{ satellite_validate_certs }}"
    content_view: "{{ cv.name }}"
    name: "{{ cvf.name }}"
    fitler_type: "{{ cvf.type }}"
    rule_name: "{{ cvfr.name }}"
    min_version: "{{ min_version }}"
    max_version: "{{ max_version }}"
    version: "{{ version }}"
    rule_state: present
  when: "cvf.type == 'rpm'"

- name: "Create the content view rpm filter rule {{ cvfr.name }}"
  katello_content_view_filter:
    username: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    server_url: "{{ satellite_url }}"
    organization: "{{ satellite_initial_organization }}"
    validate_certs: "{{ satellite_validate_certs }}"
    content_view: "{{ cv.name }}"
    name: "{{ cvf.name }}"
    rule_name: "{{ cvfr.name }}"
    rule_state: present
  when: "cvf.type == 'package_group'"

